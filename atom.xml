<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Making Stuff Work]]></title>
  <link href="http://graham.bloice.co.uk/atom.xml" rel="self"/>
  <link href="http://graham.bloice.co.uk/"/>
  <updated>2013-04-17T00:05:18+01:00</updated>
  <id>http://graham.bloice.co.uk/</id>
  <author>
    <name><![CDATA[Graham Bloice]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intro to HouseMon]]></title>
    <link href="http://graham.bloice.co.uk/blog/2013/04/12/intro-to-housemon/"/>
    <updated>2013-04-12T23:39:00+01:00</updated>
    <id>http://graham.bloice.co.uk/blog/2013/04/12/intro-to-housemon</id>
    <content type="html"><![CDATA[<p>Having got a room sensor up and running on the bench, I now want to log the values somewhere.  I&#8217;m still searching for a Home Automation server that ticks all the boxes, so for now I&#8217;ll use HouseMon from Jeelabs.  The birds-eye view of how it works is <a href="http://jeelabs.org/tag/housemon/">here</a>, and the source can be found on GitHub <a href="https://github.com/jcw/housemon">here</a>.</p>

<!--more-->


<p>On my Linux server I cloned the github repo, installed the prerequisites and ran it up to check it worked.  To customise HouseMon for my room node I created a local nodeMap, briqs/nodeMap-local.coffee, that maps the RF12 group and node ID (5 and 22 respectively) to the airwickNode driver, and also names the current location of the sensor.  I then created a new driver, drivers/airwickNode.coffee, that describes how to extract the data from the rf12 packet transmitted by the airwick node.</p>

<p>The local nodeMap is relatively self-explanatory:</p>

<figure class='code'><figcaption><span>nodeMap-local.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">exports.rf12nodes =</span>
</span><span class='line'>  <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>    <span class="mi">22</span><span class="o">:</span> <span class="s">&#39;airwickNode&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports.locations =</span>
</span><span class='line'>  <span class="s">&#39;RF12:5:22&#39;</span><span class="o">:</span> <span class="nv">title: </span><span class="s">&#39;computer room&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>but the driver is more interesting:</p>

<figure class='code'><figcaption><span>airwickNode.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports =</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">announcer: </span><span class="mi">11</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">descriptions:</span>
</span><span class='line'>    <span class="nv">ping:</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Ping count&#39;</span>
</span><span class='line'>      <span class="nv">min: </span><span class="mi">0</span>
</span><span class='line'>    <span class="nv">age:</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Estimated age&#39;</span>
</span><span class='line'>      <span class="nv">unit: </span><span class="s">&#39;days&#39;</span>
</span><span class='line'>      <span class="nv">min: </span><span class="mi">0</span>
</span><span class='line'>    <span class="nv">vpre:</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Vcc before send&#39;</span>
</span><span class='line'>      <span class="nv">unit: </span><span class="s">&#39;V&#39;</span>
</span><span class='line'>      <span class="nv">min: </span><span class="mi">0</span>
</span><span class='line'>      <span class="nv">factor: </span><span class="mi">2</span>
</span><span class='line'>      <span class="nv">scale: </span><span class="mi">2</span>
</span><span class='line'>    <span class="nv">vpost:</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Vcc after send&#39;</span>
</span><span class='line'>      <span class="nv">unit: </span><span class="s">&#39;V&#39;</span>
</span><span class='line'>      <span class="nv">min: </span><span class="mi">0</span>
</span><span class='line'>      <span class="nv">factor: </span><span class="mi">2</span>
</span><span class='line'>      <span class="nv">scale: </span><span class="mi">2</span>
</span><span class='line'>    <span class="nv">temp:</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Temperature&#39;</span>
</span><span class='line'>      <span class="nv">unit: </span><span class="s">&#39;Â°C&#39;</span>
</span><span class='line'>      <span class="nv">scale: </span><span class="mi">1</span>
</span><span class='line'>      <span class="nv">min: </span><span class="o">-</span><span class="mi">50</span>
</span><span class='line'>      <span class="nv">max: </span><span class="mi">50</span>
</span><span class='line'>    <span class="nv">humi:</span>
</span><span class='line'>      <span class="nv">title: </span><span class="s">&#39;Relative humidity&#39;</span>
</span><span class='line'>      <span class="nv">unit: </span><span class="s">&#39;%&#39;</span>
</span><span class='line'>      <span class="nv">scale: </span><span class="mi">1</span>
</span><span class='line'>      <span class="nv">min: </span><span class="mi">0</span>
</span><span class='line'>      <span class="nv">max: </span><span class="mi">100</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">feed: </span><span class="s">&#39;rf12.packet&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">decode: </span><span class="nf">(raw, cb) -&gt;</span>
</span><span class='line'>    <span class="nv">count = </span><span class="nx">raw</span><span class="p">.</span><span class="nx">readUInt32LE</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">t = </span><span class="nx">raw</span><span class="p">.</span><span class="nx">readUInt16LE</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">h = </span><span class="nx">raw</span><span class="p">.</span><span class="nx">readUInt16LE</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">result =</span>
</span><span class='line'>      <span class="nv">ping: </span><span class="nx">count</span>
</span><span class='line'>      <span class="nv">age: </span><span class="nx">count</span> <span class="o">/</span> <span class="p">(</span><span class="mi">86400</span> <span class="o">/</span> <span class="mi">60</span><span class="p">)</span> <span class="o">|</span> <span class="mi">0</span>
</span><span class='line'>      <span class="nv">temp: </span><span class="nx">t</span>
</span><span class='line'>      <span class="nv">humi: </span><span class="nx">h</span>
</span><span class='line'>      <span class="nv">vpre: </span><span class="mi">50</span> <span class="o">+</span> <span class="nx">raw</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">vpost: </span><span class="mi">50</span> <span class="o">+</span> <span class="nx">raw</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span>
</span><span class='line'>    <span class="nx">cb</span> <span class="nx">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each field in the packet is given a description, and where appropriate some units, min and max values and scale and factor values.  Scale and factor are used to convert the fixed point integer value from the driver into a decimal value for display.  For example, a temperature value of 226 is 22.6Â°C, so this requires a scale of 1 to divide it by 10.  The Vcc values require both scale and factor and an offset to turn a value of 117 into 3.34V.  The offset is supplied by the decode function where 50 is added to the raw packet value, giving 167, a factor of 2 gives 334, and a scale of 2 divides it by 100 to give 3.34.</p>

<p>With these additions, the Housemon instance is then configured from the admin page:</p>

<p><img src="http://graham.bloice.co.uk/images/HouseMon-Admin.PNG" title="HouseMon - Admin" ></p>

<p>Note the items I&#8217;ve installed, the only item that required a configuration setting was the rf12demo briq and that requires the serial port that I&#8217;ve attached the JeeNode to, in my case ttyUSB0.</p>

<p>The following images show the HouseMon Readings, Status and Graphs pages, with the temperature selected on the Graph and the timespan set to 24 hours.</p>

<p><img src="http://graham.bloice.co.uk/images/HouseMon-Readings.PNG" title="HouseMon - Readings" ></p>

<p><img src="http://graham.bloice.co.uk/images/HouseMon-Status.PNG" title="HouseMon - Status" ></p>

<p><img src="http://graham.bloice.co.uk/images/HouseMon-Graph.PNG" title="HouseMon - Graphs" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to JeeNodes]]></title>
    <link href="http://graham.bloice.co.uk/blog/2013/03/31/intro-to-jeenodes/"/>
    <updated>2013-03-31T13:53:00+01:00</updated>
    <id>http://graham.bloice.co.uk/blog/2013/03/31/intro-to-jeenodes</id>
    <content type="html"><![CDATA[<p>To make a room sensor I&#8217;m going to use a <a href="http://jeelabs.net/projects/hardware/wiki/JeeNode_Micro">JeeNode Micro</a> (JNu) reporting back to a <a href="http://jeelabs.net/projects/hardware/wiki/JeeNode_USB">JeeNode USB</a> (JNUSB) running on my home server.</p>

<!--more-->


<p>After receiving the items from the <a href="http://jeelabs.com/">JeeLabs shop</a> I connected them up to test on the bench.  I soldered the aerial wires to each item, cutting them to 82mm for the 868MHz radios.</p>

<p>The JNUSB comes ready flashed with the <a href="https://github.com/jcw/jeelib/tree/master/examples/RF12/RF12demo">RFM12Demo</a> sketch from the <a href="https://github.com/jcw/jeelib">JeeLib</a> examples directory so simply requires plugging in to a USB port and then opening a terminal to the appropriate COM port created by the USB drivers.  As I&#8217;m testing on a Windows system, I looked in Device Manager | Ports to see what pseudo com port number was, and then opened <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</a> for that com port.  Set the baud rate to 57600 and hit enter to see the standard RF12demo response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[RF12demo.7] A i1 g5 @ 868 MHz
</span><span class='line'>
</span><span class='line'>Available commands:
</span><span class='line'>  &lt;nn&gt; i     - set node ID (standard node ids are 1..26)
</span><span class='line'>               (or enter an uppercase 'A'..'Z' to set id)
</span><span class='line'>  &lt;n&gt; b      - set MHz band (4 = 433, 8 = 868, 9 = 915)
</span><span class='line'>  &lt;nnn&gt; g    - set network group (RFM12 only allows 212, 0 = any)
</span><span class='line'>  &lt;n&gt; c      - set collect mode (advanced, normally 0)
</span><span class='line'>  t          - broadcast max-size test packet, with ack
</span><span class='line'>  ...,&lt;nn&gt; a - send data packet to node &lt;nn&gt;, with ack
</span><span class='line'>  ...,&lt;nn&gt; s - send data packet to node &lt;nn&gt;, no ack
</span><span class='line'>  &lt;n&gt; l      - turn activity LED on PB1 on or off
</span><span class='line'>  &lt;n&gt; q      - set quiet mode (1 = don't report bad packets)
</span><span class='line'>Remote control commands:
</span><span class='line'>  &lt;hchi&gt;,&lt;hclo&gt;,&lt;addr&gt;,&lt;cmd&gt; f     - FS20 command (868 MHz)
</span><span class='line'>  &lt;addr&gt;,&lt;dev&gt;,&lt;on&gt; k              - KAKU command (433 MHz)
</span><span class='line'>Current configuration:
</span><span class='line'> A i1 g5 @ 868 MHz</span></code></pre></td></tr></table></div></figure>


<p>Note that I&#8217;ve issued the group command (5g) to set the group to the group used by the JNu in the next section.</p>

<p>For the JNu, things are a little more complicated as it doesn&#8217;t appear to come flashed with a sketch, nor does it have a bootloader.  JeeLabs has a guide to compiling and flashing the micro (<a href="http://jeelabs.org/2013/03/03/programming-the-jnu-v3-part-1/">Pt1</a>, <a href="http://jeelabs.org/2013/03/07/programming-the-jn%C2%B5-v3-part-2/">Pt2</a>, <a href="http://jeelabs.org/2013/03/20/programming-the-jnu-again/">Pt3</a> and <a href="http://jeelabs.org/2013/03/21/programming-the-jn%C2%B5-at-last/">Pt4</a>) but I had some issues completing the flash as I&#8217;m using a <a href="http://dangerousprototypes.com/docs/Bus_Pirate">Bus Pirate</a>(BP) as my ISP programmer and I couldn&#8217;t persuade the IDE to upload the hex file.  To workaround this I followed the instructions from Pt2 and manually fired up avrdude to upload the sketch using the BP.  After uploading the sketch, the terminal connected to the JNUSB started showing the &#8220;blip&#8221; messages from the JNu, with a new message every 60 seconds:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OK 22 1 0 0 0 1 118 0
</span><span class='line'>OK 22 2 0 0 0 1 117 118
</span><span class='line'>OK 22 3 0 0 0 1 117 118</span></code></pre></td></tr></table></div></figure>


<p>The values in the string are the reception OK flag, the node ID (22), the 32 bit message count which increments every message, and the power supply voltage before and after the transmission.  Note the first message doesn&#8217;t have an after voltage as 0 as this lags by 1 transmission.  The voltage value is scaled to 1.0V = 0, 6.0V = 250, so 117 is (117 / 50 + 1.0) 3.34V, which is the power supply from the BP.  I also set the JNUSB to quiet mode (1q) so random noise isn&#8217;t reported to the terminal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Ramblings]]></title>
    <link href="http://graham.bloice.co.uk/blog/2013/03/30/first-ramblings/"/>
    <updated>2013-03-30T23:18:00+00:00</updated>
    <id>http://graham.bloice.co.uk/blog/2013/03/30/first-ramblings</id>
    <content type="html"><![CDATA[<p>For this first post, I&#8217;ll intoduce the general themes of this blog and a little about myself.</p>

<p>So what sort of things will appear here?  In no particular order:</p>

<ul>
<li>Hardware, usually microcrontrollers, e.g. AVR, Arm.</li>
<li>Software, for the above hardware, but also PC based (Windows and Linux).</li>
<li>Home Automation, hardware and software.</li>
<li>Other random topics that take my fancy.</li>
</ul>


<!--more-->


<p>The initial items of hardware under discussion will be some small wireless sensor boards from <a href="http://jeelabs.org">Jeelabs</a>, namely the <a href="http://jeelabs.net/projects/hardware/wiki/JeeNode_USB">JeeNode USB</a> and the <a href="http://jeelabs.net/projects/hardware/wiki/JeeNode_Micro">JeeNode Micro</a>, and their associated radio module, the <a href="http://www.hoperf.com/rf/fsk/21.htm">Hope RF RFM12B</a>.</p>

<p>For radiator control I&#8217;ll be using the <a href="http://www.homexpertbyhoneywell.com/en-DE/Products/rondostat/Pages/HR-20.aspx">Honeywell HR20-Style</a> programmable thermostatic radiator valve (TRV) with <a href="http://sourceforge.net/projects/openhr20/">OpenHR20</a> firmware, fitting RFM12B boards to the TRV&#8217;s to allow wireless communications.  I&#8217;ll also be creating some room sensors (temperature, humidity and PIR for presence) with some hacked AirWick air fresheners.</p>

<p>Software items covered will initally be the firmware for the JeeNodes, OpenHR20 for the radiator valves and PC based Home Automation monitoring and Control of some flavour</p>

<p>Who am I?  I&#8217;m a software engineer working on SCADA (Industrial Control Systems) in Aberdeen, UK.  I&#8217;ve been programming since my earliest experiments with a programmable calculator in the late 1970&#8217;s, and now number a variety of languages under my belt.</p>
]]></content>
  </entry>
  
</feed>
