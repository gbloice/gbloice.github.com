<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jeenode | Making Stuff Work]]></title>
  <link href="http://graham.bloice.co.uk/blog/categories/jeenode/atom.xml" rel="self"/>
  <link href="http://graham.bloice.co.uk/"/>
  <updated>2013-04-17T00:00:04+01:00</updated>
  <id>http://graham.bloice.co.uk/</id>
  <author>
    <name><![CDATA[Graham Bloice]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intro to HouseMon]]></title>
    <link href="http://graham.bloice.co.uk/blog/2013/04/12/intro-to-housemon/"/>
    <updated>2013-04-12T23:39:00+01:00</updated>
    <id>http://graham.bloice.co.uk/blog/2013/04/12/intro-to-housemon</id>
    <content type="html"><![CDATA[<p>Having got a room sensor up and running on the bench, I now want to log the values somewhere.  I'm still searching for a Home Automation server that ticks all the boxes, so for now I'll use HouseMon from Jeelabs.  The birds-eye view of how it works is <a href="http://jeelabs.org/tag/housemon/">here</a>, and the source can be found on GitHub <a href="https://github.com/jcw/housemon">here</a>.</p>

<!--more-->


<p>On my Linux server I cloned the github repo, installed the prerequisites and ran it up to check it worked.  To customise HouseMon for my room node I created a local nodeMap, briqs/nodeMap-local.coffee, that maps the RF12 group and node ID (5 and 22 respectively) to the airwickNode driver, and also names the current location of the sensor.  I then created a new driver, drivers/airwickNode.coffee, that describes how to extract the data from the rf12 packet transmitted by the airwick node.</p>

<p>The local nodeMap is relatively self-explanatory:</p>

<p>``` coffeescript nodeMap-local.coffee
exports.rf12nodes =
  5:</p>

<pre><code>22: 'airwickNode'
</code></pre>

<p>exports.locations =
  'RF12:5:22': title: 'computer room'
```</p>

<p>but the driver is more interesting:</p>

<p>``` coffeescript airwickNode.coffee
module.exports =</p>

<p>  announcer: 11</p>

<p>  descriptions:</p>

<pre><code>ping:
  title: 'Ping count'
  min: 0
age:
  title: 'Estimated age'
  unit: 'days'
  min: 0
vpre:
  title: 'Vcc before send'
  unit: 'V'
  min: 0
  factor: 2
  scale: 2
vpost:
  title: 'Vcc after send'
  unit: 'V'
  min: 0
  factor: 2
  scale: 2
temp:
  title: 'Temperature'
  unit: '°C'
  scale: 1
  min: -50
  max: 50
humi:
  title: 'Relative humidity'
  unit: '%'
  scale: 1
  min: 0
  max: 100
</code></pre>

<p>  feed: 'rf12.packet'</p>

<p>  decode: (raw, cb) -></p>

<pre><code>count = raw.readUInt32LE(1)
t = raw.readUInt16LE(8, true)
h = raw.readUInt16LE(10, true)
result =
  ping: count
  age: count / (86400 / 60) | 0
  temp: t
  humi: h
  vpre: 50 + raw[6]
  vpost: 50 + raw[7]
cb result
</code></pre>

<p>```</p>

<p>Each field in the packet is given a description, and where appropriate some units, min and max values and scale and factor values.  Scale and factor are used to convert the fixed point integer value from the driver into a decimal value for display.  For example, a temperature value of 226 is 22.6°C, so this requires a scale of 1 to divide it by 10.  The Vcc values require both scale and factor and an offset to turn a value of 117 into 3.34V.  The offset is supplied by the decode function where 50 is added to the raw packet value, giving 167, a factor of 2 gives 334, and a scale of 2 divides it by 100 to give 3.34.</p>

<p>With these additions, the Housemon instance is then configured from the admin page:</p>

<p><img src="/images/HouseMon-Admin.png" title="HouseMon - Admin" ></p>

<p>Note the items I've installed, the only item that required a configuration setting was the rf12demo briq and that requires the serial port that I've attached the JeeNode to, in my case ttyUSB0.</p>

<p>The following images show the HouseMon Readings, Status and Graphs pages, with the temperature selected on the Graph and the timespan set to 24 hours.</p>

<p><img src="/images/HouseMon-Readings.png" title="HouseMon - Readings" ></p>

<p><img src="/images/HouseMon-Status.png" title="HouseMon - Status" ></p>

<p><img src="/images/HouseMon-Graph.png" title="HouseMon - Graphs" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to JeeNodes]]></title>
    <link href="http://graham.bloice.co.uk/blog/2013/03/31/intro-to-jeenodes/"/>
    <updated>2013-03-31T13:53:00+01:00</updated>
    <id>http://graham.bloice.co.uk/blog/2013/03/31/intro-to-jeenodes</id>
    <content type="html"><![CDATA[<p>To make a room sensor I'm going to use a <a href="http://jeelabs.net/projects/hardware/wiki/JeeNode_Micro">JeeNode Micro</a> (JNu) reporting back to a <a href="http://jeelabs.net/projects/hardware/wiki/JeeNode_USB">JeeNode USB</a> (JNUSB) running on my home server.</p>

<!--more-->


<p>After receiving the items from the <a href="http://jeelabs.com/">JeeLabs shop</a> I connected them up to test on the bench.  I soldered the aerial wires to each item, cutting them to 82mm for the 868MHz radios.</p>

<p>The JNUSB comes ready flashed with the <a href="https://github.com/jcw/jeelib/tree/master/examples/RF12/RF12demo">RFM12Demo</a> sketch from the <a href="https://github.com/jcw/jeelib">JeeLib</a> examples directory so simply requires plugging in to a USB port and then opening a terminal to the appropriate COM port created by the USB drivers.  As I'm testing on a Windows system, I looked in Device Manager | Ports to see what pseudo com port number was, and then opened <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">PuTTY</a> for that com port.  Set the baud rate to 57600 and hit enter to see the standard RF12demo response:</p>

<p>```
[RF12demo.7] A i1 g5 @ 868 MHz</p>

<p>Available commands:
  <nn> i     - set node ID (standard node ids are 1..26)</p>

<pre><code>           (or enter an uppercase 'A'..'Z' to set id)
</code></pre>

<p>  <n> b      - set MHz band (4 = 433, 8 = 868, 9 = 915)
  <nnn> g    - set network group (RFM12 only allows 212, 0 = any)
  <n> c      - set collect mode (advanced, normally 0)
  t          - broadcast max-size test packet, with ack
  ...,<nn> a - send data packet to node <nn>, with ack
  ...,<nn> s - send data packet to node <nn>, no ack
  <n> l      - turn activity LED on PB1 on or off
  <n> q      - set quiet mode (1 = don't report bad packets)
Remote control commands:
  <hchi>,<hclo>,<addr>,<cmd> f     - FS20 command (868 MHz)
  <addr>,<dev>,<on> k              - KAKU command (433 MHz)
Current configuration:
 A i1 g5 @ 868 MHz
```</p>

<p>Note that I've issued the group command (5g) to set the group to the group used by the JNu in the next section.</p>

<p>For the JNu, things are a little more complicated as it doesn't appear to come flashed with a sketch, nor does it have a bootloader.  JeeLabs has a guide to compiling and flashing the micro (<a href="http://jeelabs.org/2013/03/03/programming-the-jnu-v3-part-1/">Pt1</a>, <a href="http://jeelabs.org/2013/03/07/programming-the-jn%C2%B5-v3-part-2/">Pt2</a>, <a href="http://jeelabs.org/2013/03/20/programming-the-jnu-again/">Pt3</a> and <a href="http://jeelabs.org/2013/03/21/programming-the-jn%C2%B5-at-last/">Pt4</a>) but I had some issues completing the flash as I'm using a <a href="http://dangerousprototypes.com/docs/Bus_Pirate">Bus Pirate</a>(BP) as my ISP programmer and I couldn't persuade the IDE to upload the hex file.  To workaround this I followed the instructions from Pt2 and manually fired up avrdude to upload the sketch using the BP.  After uploading the sketch, the terminal connected to the JNUSB started showing the "blip" messages from the JNu, with a new message every 60 seconds:</p>

<p><code>
OK 22 1 0 0 0 1 118 0
OK 22 2 0 0 0 1 117 118
OK 22 3 0 0 0 1 117 118
</code></p>

<p>The values in the string are the reception OK flag, the node ID (22), the 32 bit message count which increments every message, and the power supply voltage before and after the transmission.  Note the first message doesn't have an after voltage as 0 as this lags by 1 transmission.  The voltage value is scaled to 1.0V = 0, 6.0V = 250, so 117 is (117 / 50 + 1.0) 3.34V, which is the power supply from the BP.  I also set the JNUSB to quiet mode (1q) so random noise isn't reported to the terminal.</p>
]]></content>
  </entry>
  
</feed>
